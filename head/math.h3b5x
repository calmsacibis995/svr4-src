#ident	"@(#)head:math.h3b5x	1.12"

/*      M32 || u3b15 || u3b5 || u3b2 Cross-environment math.h
 *
 *	This file is to be used instead of math.h when
 *      compiling in the M32 || u3b15 || u3b5 || u3b2 cross-environment on a VAX.
 *
 */

#ifndef _POLY9 		
extern int signgam;

struct exception {
	int type;
	char *name;
	double arg1;
	double arg2;
	double retval;
};

#if defined(__STDC__)

extern /* volatile */ int errno;

#define EDOM   	 	33      /* Math arg out of domain of func       */
#define ERANGE 		34      /* Math result not representable        */

extern double acos(double x); 
extern double asin(double x); 
extern double atan(double x); 
extern double atan2(double y, double x); 
extern double cos(double x); 
extern double sin(double x); 
extern double tan(double x); 

extern double cosh(double x); 
extern double sinh(double x); 
extern double tanh(double x); 

extern double exp(double x); 
extern double frexp(double value, int *exp); 
extern double ldexp(double x, int exp); 
extern double log(double x); 
extern double log10(double x); 
extern double modf(double value, double *iptr); 

extern double pow(double x, double y); 
extern double sqrt(double x);

extern double ceil(double x); 
extern double fabs(double x); 
extern double floor(double x); 
extern double fmod(double x, double y); 

extern float acosf(float x); 
extern float asinf(float x); 
extern float atanf(float x); 
extern float atan2f(float y, float x); 
extern float cosf(float x); 
extern float sinf(float x); 
extern float tanf(float x); 

extern float coshf(float x); 
extern float sinhf(float x); 
extern float tanhf(float x); 

extern float expf(float x); 
extern float logf(float x); 
extern float log10f(float x); 

extern float powf(float x, float y); 
extern float sqrtf(float x);

extern float ceilf(float x); 
extern float fabsf(float x); 
extern float floorf(float x); 
extern float fmodf(float x, float y); 
extern float modff(float x, float *y); 

#if #machine(u3b)
#define MAXFLOAT        ((float)3.40282346638528860e+38)

#elif #machine(gcos)
#define MAXFLOAT        ((float)1.7014118219281863150e+38)

#else
#define MAXFLOAT        ((float)1.701411733192644299e+38)
#endif

#ifndef HUGE_VAL
#if #machine(pdp11) || #machine(vax)
#define HUGE_VAL	1.701411733192644299e+38

#elif #machine(gcos)
#define HUGE_VAL        1.7014118219281863150e+38

#else
typedef union _h_val {
        unsigned long i[2];
        double d;
} _h_val;

extern _h_val _huge_val;
#define HUGE_VAL _huge_val.d

enum version { c_issue_4, ansi_1, strict_ansi };
extern enum version _lib_version;

#else
#define HUGE_VAL	MAXFLOAT
#endif
#endif	/* HUGE_VAL */

#if __STDC__ == 0	/* non-ANSI conformant compilation */ 

#define HUGE		MAXFLOAT

extern double atof(const char *nptr); 
extern double erf(double x); 
extern double erfc(double x); 
extern double gamma(double x);
extern double hypot(double x, double y);
extern double j0(double x); 
extern double j1(double x); 
extern double jn(int n, double x); 
extern int matherr(struct exception *x);
extern double y0(double x); 
extern double y1(double x); 
extern double yn(int n, double x); 

/* new functions */
extern double scalb(double, int);
extern double logb(double);
extern double nextafter(double, double);
extern double conv(char *);
extern double acosh(double);
extern double asinh(double);
extern double atanh(double);
extern double cbrt(double);
extern double copysign(double, double);
extern double lgamma(double);
extern double nearbyinteger(double);
extern double rem(double, double);
extern int unordered(double, double);
extern int finite(double);

#endif	/* __STDC__ == 0 */

#else	/* !defined(__STDC__) */

extern volatile int errno;

extern double atof(), frexp(), ldexp(), modf();
extern double j0(), j1(), jn(), y0(), y1(), yn();
extern double erf(), erfc();
extern double exp(), log(), log10(), pow(), sqrt();
extern double floor(), ceil(), fmod(), fabs();
extern double gamma();
extern double hypot();
extern int matherr();
extern double sinh(), cosh(), tanh();
extern double sin(), cos(), tan(), asin(), acos(), atan(), atan2();

#if u3b 
#define MAXFLOAT        ((float)3.40282346638528860e+38)
#endif
#if pdp11 || vax || M32 || u3b15 || u3b5 || u3b2
#define MAXFLOAT        ((float)1.701411733192644299e+38)
#endif
#if gcos
#define MAXFLOAT        ((float)1.7014118219281863150e+38)
#endif

#define HUGE    MAXFLOAT

#endif	/* __STDC__ */	

/* some useful constants */
#define M_E		2.7182818284590452354
#define M_LOG2E		1.4426950408889634074
#define M_LOG10E	0.43429448190325182765
#define M_LN2		0.69314718055994530942
#define M_LN10		2.30258509299404568402
#define M_PI		3.14159265358979323846
#define M_PI_2		1.57079632679489661923
#define M_PI_4		0.78539816339744830962
#define M_1_PI		0.31830988618379067154
#define M_2_PI		0.63661977236758134308
#define M_2_SQRTPI	1.12837916709551257390
#define M_SQRT2		1.41421356237309504880
#define M_SQRT1_2	0.70710678118654752440


#define _ABS(x)		((x) < 0 ? -(x) : (x))

#define _REDUCE(TYPE, X, XN, C1, C2)	{ \
	double x1 = (double)(TYPE)X, x2 = X - x1; \
	X = x1 - (XN) * (C1); X += x2; X -= (XN) * (C2); }

#define _POLY1(x, c)	((c)[0] * (x) + (c)[1])
#define _POLY2(x, c)	(_POLY1((x), (c)) * (x) + (c)[2])
#define _POLY3(x, c)	(_POLY2((x), (c)) * (x) + (c)[3])
#define _POLY4(x, c)	(_POLY3((x), (c)) * (x) + (c)[4])
#define _POLY5(x, c)	(_POLY4((x), (c)) * (x) + (c)[5])
#define _POLY6(x, c)	(_POLY5((x), (c)) * (x) + (c)[6])
#define _POLY7(x, c)	(_POLY6((x), (c)) * (x) + (c)[7])
#define _POLY8(x, c)	(_POLY7((x), (c)) * (x) + (c)[8])
#define _POLY9(x, c)	(_POLY8((x), (c)) * (x) + (c)[9])

#define DOMAIN		1
#define	SING		2
#define	OVERFLOW	3
#define	UNDERFLOW	4
#define	TLOSS		5
#define	PLOSS		6

#endif /* _POLY9 */
