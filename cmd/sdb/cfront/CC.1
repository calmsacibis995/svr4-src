#ident	"@(#)sdb:cfront/CC.1	1.1"
.  \"ident	"@(#)cfront:CC.1	1.3"
.  \"This CC man page is generated by: troff -man CC.1
.TH CC 1 
.UC 4
.SH NAME
CC \- C++ translator
.SH SYNOPSIS
.B CC
[ option ] ... file ...
.SH DESCRIPTION
\f3CC\f1 (capital CC) 
translates C++ source code to C source code.
The command uses
.IR cpp (1)
for preprocessing,
.I cfront
for syntax and type checking, and
.IR cc (1)
for code generation.
.PP
.I CC
takes arguments ending in
.B .c, .C
or
.B .i
to be C++ source programs.
.B .i 
files are presumed to be the output of 
.I cpp(1).
Both
.B .s
and
.B .o
files are also accepted by the 
.I CC
command and passed to
.IR cc(1).
.PP
.IR CC
interprets the following options:
.TP 8
.B \-E
Run only
.I cpp
on the
.B .c
files and send the result to standard output.
.TP
.B \-F
Run only
.I cpp
and
.I cfront
on the
.B .c
files, and send the result to standard output.
.TP
.B \-Fc
Like the
.B \-F
option, but the output is C source code suitable as a
.B .c
file for
.IR cc(1) .
.TP
\fB\-.\fP\fIsuffix\fP
Instead of using standard output for the
.B \-E ,
.B \-F
or
.B \-Fc
options, place the output from each
.B .c
file on a file with the corresponding
.IR .suffix .
.TP
\f3+V\f1
Accept regular C function declarations; use the
.I /usr/include
directory \f3#include\f1 files.
Support for this option is not guaranteed in future releases.
.TP
\f3+L\f1
Generate source line number information using the format
"#line %d" instead of "# %d".
.TP
+\f3x\fP\fI file\fP
Read a file of sizes and alignments.
Each line contains three fields: a type name, the size (in bytes),
and the alignment (in bytes).
This option is useful for cross compilations.
.TP
+\f3e\fP
Optimize a program by ensuring that only one virtual table is generated per
class.  +\f3e1\fP causes virtual tables to be external and defined, that is,
initialized.  +\f3e0\fP causes virtual tables to be external but only declared, 
that is, uninitialized.
.TP
+\f3S\f1
Spy on
.IR cfront ;
that is, print some information on
.IR stderr .
.sp .5
See
.IR ld (1)
or loader options,
.IR as (1)
for assembler options,
.IR cc (1)
for code generation options,
and
.IR cpp (1)
for preprocessor options.
.SH FILES
file.[Cc]		input file
.br
file..c			cfront output
.br
file.o			object file
.br
a.out			linked output
.br
/lib/cpp			C preprocessor
.br
cfront			C front end
.br
/bin/cc			C compiler
.br
/lib/libc.a		standard C library; see Section (3) in the
.I \s-1UNIX\s+1 System V 
			\f2Programmer Reference Manual\f1
.br
/lib/libC.a		C++ library
.br
/usr/include/CC	standard directory for \f3#include\f1 files
.br
/usr/include		standard directory for \f3#include\f1 files 
when the +\f3V\f1 option is used
.SH "SEE ALSO"
cc(1), monitor(3), prof(1), ld(1), cpp(1), as(1). 
.br
.br
Bjarne Stroustrup,
.I The C++ Programming Language,
Addison-Wesley 1986.
.br
B. W. Kernighan and D. M. Ritchie,
.I The C Programming Language,
Prentice-Hall 1978.
.SH DIAGNOSTICS
The diagnostics produced by
.I CC
itself are intended to be
self-explanatory.
Occasional messages may be produced by the assembler or loader.
No messages should be produced by
.IR cc (1) .
.SH BUGS
.PP
Some ``used before set'' warnings are wrong.
.PP
There is a (temporary) hole in the C++ type system allowing C++ programs to use
C libraries.
When a name is overloaded the first function of that name (only) can be linked
to a library compiled by
.IR cc .
Thus, the declaration
.sp
        overload read(int,char*,int), read(vector*);\fP
.sp
will allow the system call
.IR read (2)
to be used together with user defined functions
of the same name.
Use of this facility may lead to unexpected behavior. For example,
had the other
.B read()
been declared first,
or had the system
.B read()
not been declared,
then the user's
.B read()
would have been called by library functions like
.IR scanf (3).
