#ident	"@(#)devintf:devices/attrs/add/Form.add	1.3.1.1"

form="Add an Attribute"
help=OPEN TEXT $INTFBASE/Text.itemhelp $LININFO
lifetime=longterm
begrow=any
begcol=any
framemsg=`readfile $INTFBASE/form.msg`

init=`
    getdev | set -l ALIASES ;
    if [ $ALIASES ] ;
    then set -l OK=TRUE ;
    else
	set -l OK=FALSE ;
	message "There are no devices to which to add an attribute." ;
    fi ;
`$OK


done=`
    indicator -w "";
    getfrm | set -l FRAMENUM ;
    putdev -m "$F1" "$F2"="$F3" ;
    if [ $RET -eq 0 ] ;
    then set -l DLA="The \"$F2\" attribute with a value of \"$F3\" was successfully added to the description of the device \"$F1\"." ;
    elif [ $RET -eq 2 ] ;
    then set -l DLA="Unable to open or create device tables." ;
    else set -l DLA="Internal error $RET" ;
    fi ;
    indicator "" ;
`OPEN TEXT $OBJ_DIR/Text.c_add "$DLA"

name="Device Alias:"
lininfo="Form.add:Alias"
nrow=1
ncol=1
frow=1
fcol=14
rows=1
columns=14
invalidmsg=$INVMSG
valid=`
    indicator -w "" ;
    if [ -z "$F1" ] ;
    then
	set -l VALID=FALSE ;
	set -l INVMSG="This field may not be blank. " ;
    else
	regex -v "$F1" '^[-.$_a-zA-Z0-9]+$' 'TRUE' '.*' 'FALSE' | set -l VALID ;
	if [ $VALID = "TRUE" ] ;
	then
	    devattr "$F1" alias >/dev/null ;
	    if [ $RET -ne 0 ] ;
	    then if [ $RET -eq 3 ] ;
		 then set -l INVMSG="The device alias \"$F1\" is not defined." ;
		 else set -l INVMSG="Internal error $RET" ;
		 fi ;
		 set -l VALID=FALSE ;
	    fi ;
	else set -l INVMSG="The value \"$F1\" is not a valid alias." ;
	fi ;
    fi ;
    indicator "" ;
`$VALID
rmenu={ `
    indicator -w "" ;
    getdev ;
    indicator "" ;
` }

name="Attribute:"
lininfo="Form.add:Attribute"
nrow=2
ncol=1
frow=2
fcol=14
rows=1
columns=14
invalidmsg=$INVMSG
valid=`
    indicator -w "" ;
    if [ -z "$F2" ] ;
    then
	set -l VALID=FALSE ;
	set -l INVMSG="This field may not be blank." ;
    else
	regex -v "$F2" '^[-.$_0-9a-zA-Z]+$' 'TRUE' '.*' 'FALSE' | set -l VALID ;
	if [ $VALID = "TRUE" ] ;
	then
	    devattr "$F1" "$F2" | set -l VALUE ;
	    if [ $RET -eq 0 ] ;
	    then
		if [ -z "$VALUE" ] ;
		then
		    if [ "$F2" != "cdevice" -a "$F2" != "bdevice" -a "$F2" != "pathname" ] ;
		    then
			set -l VALID=FALSE ;
			set -l INVMSG="The attribute \"$F2\" is already defined for the device \"$F1\"." ;
		    fi ;
		else
		    set -l VALID=FALSE ;
		    set -l INVMSG="The attribute \"$F2\" is already defined for the device \"$F1\"." ;
		fi ;
	    elif [ $RET -ne 4 ] ;
	    then
		set -l VALID=FALSE ;
		set -l INVMSG="Internal error $RET" ;
	    fi ;
	else set -l INVMSG="The value \"$F2\" is not a valid attribute name." ;
	fi ;
    fi ;
    indicator "" ;
`$VALID

name="Value:"
lininfo="Form.add:Value"
nrow=2
ncol=29
frow=2
fcol=35
rows=1
columns=40
invalidmsg=$INVMSG
valid=`
    if [ "$F2" = "cdevice" -o "$F2" = "bdevice" -o "$F2" = "pathname" ] ;
    then
	indicator -w "" ;
	if [ -z "$F3" ] ;
	then
	    set -l VALID=TRUE ;
	else
	    regex -v "$F3" '^/[^: ]*$' 'TRUE' '.*' 'FALSE' | set -l VALID ;
	    if [ $VALID = "FALSE" ] ;
	    then set -l INVMSG="The value \"$F3\" is not valid for the attribute \"$F2\"." ;
	    fi ;
	fi ;
	indicator "" ;
    else
	set VALID=TRUE ;
    fi ;
`$VALID

name=RESET
button=8
action=reset
