#ident	"@(#)devintf:devices/attrs/modify/Form.modify	1.3"

form="Modify an Attribute"
help=OPEN TEXT $INTFBASE/Text.itemhelp $LININFO
lifetime=longterm
begrow=any
begcol=any
framemsg=`readfile $INTFBASE/form.msg`

init=`
    getdev | set -l ALIASES ;
    if [ $ALIASES ] ;
    then set -l OK=TRUE ;
    else
	set -l OK="FALSE" ;
	message "There are no device descriptions to modify." ;
    fi;
`$OK


done=`
    indicator -w "";
    getfrm | set -l FRAMENUM ;
    putdev -m "$F1" "$F2"="$F3" ;
    if [ $RET -eq 0 ] ;
    then set -l ENDMSG="The \"$F2\" attribute was successfully changed to \"$F3\" in the description of the device \"$F1\"." ;
    elif [ $RET -eq 2 ] ;
    then set -l ENDMSG="Unable to open or create the device table." ;
    else set -l ENDMSG="Internal error $RET" ;
    indicator "";
    fi ;
`OPEN TEXT $OBJ_DIR/Text.c_modify "$ENDMSG"

name="Device Alias:"
lininfo="Form.modify:Alias"
nrow=1
ncol=1
frow=1
fcol=14
rows=1
columns=14
invalidmsg=$INVMSG
valid=`
    indicator -w "" ;
    if [ -z "$F1" ] ;
    then
	set -l VALID=FALSE;
	set -l INVMSG="This field may not be blank." ;
    else
	regex -v "$F1" '^[-$_.a-zA-Z0-9]+$' 'TRUE' '.*' 'FALSE' | set -l VALID ;
	if [ $VALID = "TRUE" ] ;
	then
	    devattr "$F1" alias >/dev/null ;
	    if [ $RET -eq 0 ] ;
	    then set -l VALID=true ;
	    else
		if [ $RET -eq 3 ] ;
		then set -l INVMSG="The device alias \"$F1\" is not defined." ;
		else set -l INVMSG="Internal error $RET" ;
		fi ;
		set -l VALID="FALSE" ;
	    fi ;
	else set -l INVMSG="The value \"$F1\" is not a valid device alias." ;
	fi ;
    fi ;
    indicator "" ;
`$VALID
rmenu={ `
    indicator -w "" ;
    getdev ;
    indicator "" ;
` }

name="Attribute:"
lininfo="Form.modify:Attribute"
nrow=2
ncol=1
frow=2
fcol=14
rows=1
columns=14
invalidmsg="$INVMSG"
rmenu=vary { `
    indicator -w "" ;
    devattr -v "$F1" | sed 's/=.*//g' | sed '/^alias$/d' ;
    indicator "" ;
` }
valid=`
    indicator -w "" ;
    if [ -z "$F2" ] ;
    then
	set -l VALID=FALSE ;
	set -l INVMSG="This field may not be blank." ;
    else
	regex -v "$F2" '^[-$_.0-9a-zA-Z]+$' 'TRUE' '.*' 'FALSE' | set -l VALID ;
	if [ $VALID = "TRUE" ] ;
	then
	    devattr "$F1" "$F2" >/dev/null ;
	    if [ $RET -eq 0 ] ;
	    then
		if [ $F2 = "alias" ] ;
		then
		    set -l VALID="FALSE" ;
		    set -l INVMSG="The \"$F2\" attribute cannot be modified." ;
		fi ;
	    elif [ $RET -eq 4 ] ;
	    then
		set -l VALID="FALSE" ;
		set -l INVMSG="The attribute \"$F2\" is not defined for the device \"$F1\"." ;
	    else
		set -l VALID="FALSE" ;
		set -l INVMSG="Internal error $RET" ;
	    fi ;
	else set -l INVMSG="The value \"$F2\" is not a valid attribute name." ;
	fi ;
    fi ;
    indicator "" ;
`$VALID

name="Value:"
lininfo="Form.modify:Value"
nrow=2
ncol=29
frow=2
fcol=35
rows=1
columns=40
invalidmsg=$INVMSG
valid=`
    indicator -w "" ;
    if [ -z "$F3" ] ;
    then
	set -l VALID=TRUE ;
    else
	if [ "$F2" = 'cdevice' -o "$F2" = 'bdevice' -o "$F2" = 'pathname' ] ;
	then
	    regex -v "$F3" '^/[^:]*$' 'TRUE' '.*' 'FALSE' | set -l VALID ;
	    if [ $VALID = 'TRUE' ] ;
	    then
		if [ "$F2" = 'cdevice' -a -c "$F3" ] ;
		then
		    ;
		elif [ "$F2" = 'bdevice' -a -b "$F3" ] ;
		then
		    ;
		elif [ "$F2" = 'pathname' ] ;
		then
		    ls "$F3" >/dev/null ;
		    if [ $RET -eq 0 ] ;
		    then
			;
		    else message "WARNING: \"$F3\" is nonexistant." ;
		    fi ;
		else message "WARNING: \"$F3\" is nonexistant or is an unexpected file type." ;
		fi ;
	    else
		set -l INVMSG="The value \"$F3\" is not valid for the attribute \"$F2\"." ;
	    fi ;
	else
	    set -l VALID=TRUE ;
	fi ;
    fi ;
    indicator "" ;
`$VALID

name=RESET
button=8
action=reset
