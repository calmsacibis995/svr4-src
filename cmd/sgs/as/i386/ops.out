#ident	"@(#)as:i386/ops.out	1.3"

{"addr16",	INSTRL,	NO_OP-256,	8,	0x67L},
{"data16",	INSTRL,	NO_OP-256,	8,	0x66L},

{"movsbw",	INSTRW,	WMOVS-256,	24,	0x0fbe00L},
{"movsbl",	INSTRL, LMOVS-256,	24,	0x0fbe00L},
{"movswl",	INSTRL,	LMOVS-256,	24,	0x0fbf00L},

{"movzbw",	INSTRW,	WMOVZ-256,	24,	0x0fb600L},
{"movzbl",	INSTRL, LMOVZ-256,	24,	0x0fb600L},
{"movzwl",	INSTRL,	LMOVZ-256,	24,	0x0fb700L},

{"btw",		BT, 	WBIT1-256,	24,	0x0fa300L},
{"btwI",	BT, 	WBIT1-256,	24,	0x0fba00L},
{"btl",		BT, 	LBIT1-256,	24,	0x0fa300L},
{"btlI",	BT, 	LBIT1-256,	24,	0x0fba00L},

{"btsw",	BTS, 	WBIT1-256,	24,	0x0fab00L},
{"btswI",	BTS, 	WBIT1-256,	24,	0x0fba00L},
{"btsl",	BTS, 	LBIT1-256,	24,	0x0fab00L},
{"btslI",	BTS, 	LBIT1-256,	24,	0x0fba00L},

{"btrw",	BTR, 	WBIT1-256,	24,	0x0fb300L},
{"btrwI",	BTR, 	WBIT1-256,	24,	0x0fba00L},
{"btrl",	BTR, 	LBIT1-256,	24,	0x0fb300L},
{"btrlI",	BTR, 	LBIT1-256,	24,	0x0fba00L},

{"btcw",	BTC, 	WBIT1-256,	24,	0x0fbb00L},
{"btcwI",	BTC, 	WBIT1-256,	24,	0x0fba00L},
{"btcl",	BTC, 	LBIT1-256,	24,	0x0fbb00L},
{"btclI",	BTC, 	LBIT1-256,	24,	0x0fba00L},

{"bsfw",	INSTRW, WBIT2-256,	24,	0x0fbc00L},
{"bsfl",	INSTRL, LBIT2-256,	24,	0x0fbc00L},

{"bsrw",	INSTRW, WBIT2-256,	24,	0x0fbd00L},
{"bsrl",	INSTRL, LBIT2-256,	24,	0x0fbd00L},

{"shldw",	INSTRW, WBIT3-256,	24,	0x0fa500L},
{"shldwI",	INSTRW, WBIT3-256,	24,	0x0fa400L},
{"shldl",	INSTRL, LBIT3-256,	24,	0x0fa500L},
{"shldlI",	INSTRW, LBIT3-256,	24,	0x0fa400L},

{"shrdw",	INSTRW, WBIT3-256,	24,	0x0fad00L},
{"shrdwI",	INSTRW, WBIT3-256,	24,	0x0fac00L},
{"shrdl",	INSTRL, LBIT3-256,	24,	0x0fad00L},
{"shrdlI",	INSTRW, LBIT3-256,	24,	0x0fac00L},

{"nop",		INSTRW, NO_OP-256,	8,	0x90L},

{"xlat",	INSTRW,	NO_OP-256,	8,	0xd7L},
{"lahf",	INSTRW,	NO_OP-256,	8,	0x9fL},
{"sahf",	INSTRW,	NO_OP-256,	8,	0x9eL},

{"pushf",	INSTRL,	NO_OP-256,	8,	0x9cL},
{"popf",	INSTRL,	NO_OP-256,	8,	0x9dL},

{"pushfl",	INSTRL,	NO_OP-256,	8,	0x9cL},
{"popfl",	INSTRL,	NO_OP-256,	8,	0x9dL},

{"pushfw",	INSTRW,	NO_OP-256,	16,	0x669cL},
{"popfw",	INSTRW,	NO_OP-256,	16,	0x669dL},

{"aaa",		INSTRW,	NO_OP-256,	8,	0x37L},
{"daa",		INSTRW,	NO_OP-256,	8,	0x27L},
{"aas",		INSTRW,	NO_OP-256,	8,	0x3fL},
{"aam",		INSTRW,	NO_OP-256,	16,	0xd40aL},
{"das",		INSTRW,	NO_OP-256,	8,	0x2fL},
{"aad",		INSTRW,	NO_OP-256,	16,	0xd50aL},
{"rep",		INSTRW,	NO_OP-256,	8,	0xf3L},
{"repz",	INSTRW,	NO_OP-256,	8,	0xf3L},
{"repnz",	INSTRW,	NO_OP-256,	8,	0xf2L},

{"cltd",	INSTRL, NO_OP-256,	8,	0x99L},
{"cwtl",	INSTRL, NO_OP-256,	8,	0x98L},
{"cwtd",	INSTRW,	NO_OP-256,	16,	0x6699L},
{"cbtw",	INSTRW,	NO_OP-256,	16,	0x6698L},


{"slodb",	INSTRB,	BSTROP-256,	8,	0xacL},
{"slodw",	INSTRW,	WSTROP-256,	8,	0xadL},
{"slodl",	INSTRL,	LSTROP-256,	8,	0xadL},
{"slod",	INSTRL,	LSTROP-256,	8,	0xadL},
{"lodsb",	INSTRB,	BSTROP-256,	8,	0xacL},
{"lodsw",	INSTRW,	WSTROP-256,	8,	0xadL},
{"lodsl",	INSTRL,	LSTROP-256,	8,	0xadL},
{"lods",	INSTRL,	LSTROP-256,	8,	0xadL},

{"smovb",	INSTRB,	BSTROP-256,	8,	0xa4L},
{"smovw",	INSTRW,	WSTROP-256,	8,	0xa5L},
{"smovl",	INSTRL,	LSTROP-256,	8,	0xa5L},
{"smov",	INSTRL,	LSTROP-256,	8,	0xa5L},
{"movsb",	INSTRB,	BSTROP-256,	8,	0xa4L},
{"movsw",	INSTRW,	WSTROP-256,	8,	0xa5L},
{"movsl",	INSTRL,	LSTROP-256,	8,	0xa5L},
{"movs",	INSTRL,	LSTROP-256,	8,	0xa5L},

{"scmpb",	INSTRB,	BSTROP-256,	8,	0xa6L},
{"scmpw",	INSTRW,	WSTROP-256,	8,	0xa7L},
{"scmpl",	INSTRL,	LSTROP-256,	8,	0xa7L},
{"scmp",	INSTRL,	LSTROP-256,	8,	0xa7L},
{"cmpsb",	INSTRB,	BSTROP-256,	8,	0xa6L},
{"cmpsw",	INSTRW,	WSTROP-256,	8,	0xa7L},
{"cmpsl",	INSTRL,	LSTROP-256,	8,	0xa7L},
{"cmps",	INSTRL,	LSTROP-256,	8,	0xa7L},

{"scab",	INSTRB,	BSTROP-256,	8,	0xaeL},
{"scaw",	INSTRW,	WSTROP-256,	8,	0xafL},
{"scal",	INSTRL,	LSTROP-256,	8,	0xafL},
{"sscab",	INSTRB,	BSTROP-256,	8,	0xaeL},
{"sscaw",	INSTRW,	WSTROP-256,	8,	0xafL},
{"sscal",	INSTRL,	LSTROP-256,	8,	0xafL},
{"ssca",	INSTRL,	LSTROP-256,	8,	0xafL},
{"scasb",	INSTRB,	BSTROP-256,	8,	0xaeL},
{"scasw",	INSTRW,	WSTROP-256,	8,	0xafL},
{"scasl",	INSTRL,	LSTROP-256,	8,	0xafL},
{"scas",	INSTRL,	LSTROP-256,	8,	0xafL},

{"sstob",	INSTRB,	BSTROP-256,	8,	0xaaL},
{"sstow",	INSTRW,	WSTROP-256,	8,	0xabL},
{"sstol",	INSTRL,	LSTROP-256,	8,	0xabL},
{"ssto",	INSTRL,	LSTROP-256,	8,	0xabL},
{"stosb",	INSTRB,	BSTROP-256,	8,	0xaaL},
{"stosw",	INSTRW,	WSTROP-256,	8,	0xabL},
{"stosl",	INSTRL,	LSTROP-256,	8,	0xabL},
{"stos",	INSTRL,	LSTROP-256,	8,	0xabL},

{"ret",		INSTRW,	RETOP-256,	8,	0xc3L},
{"lret",	INSTRW,	RETOP-256,	8,	0xcbL},
{"lretE",	INSTRW,	RETOP-256,	8,	0xcaL},
{"into",	INSTRW,	NO_OP-256,	8,	0xceL},
{"iret",	INSTRW,	NO_OP-256,	8,	0xcfL},
{"clc",		INSTRW,	NO_OP-256,	8,	0xf8L},
{"cmc",		INSTRW,	NO_OP-256,	8,	0xf5L},
{"stc",		INSTRW,	NO_OP-256,	8,	0xf9L},
{"cld",		INSTRW,	NO_OP-256,	8,	0xfcL},
{"std",		INSTRW,	NO_OP-256,	8,	0xfdL},
{"cli",		INSTRW,	NO_OP-256,	8,	0xfaL},
{"sti",		INSTRW,	NO_OP-256,	8,	0xfbL},
{"hlt",		INSTRW,	NO_OP-256,	8,	0xf4L},
{"wait",	INSTRW,	NO_OP-256,	8,	0x9bL},
{"lock",	INSTRW,	NO_OP-256,	8,	0xf0L},
{"int",		INSTRW,	EXPOP1-256,	8,	0xcdL},

{"inb",		INSTRB,	EXPOP2-256,	8,	0xecL},
{"inw",		INSTRW,	EXPOP2-256,	8,	0xedL},
{"inl",		INSTRL,	EXPOP2-256,	8,	0xedL},
{"in",		INSTRL,	EXPOP2-256,	8,	0xedL},

{"outb",	INSTRB,	EXPOP2-256,	8,	0xeeL},
{"outw",	INSTRW,	EXPOP2-256,	8,	0xefL},
{"outl",	INSTRL,	EXPOP2-256,	8,	0xefL},
{"out",		INSTRL,	EXPOP2-256,	8,	0xefL},

{"inbE",	EINST,	EXPOPT-256,	8,	0xe4L},
{"inwE",	EINST,	EXPOPT-256,	8,	0xe5L},
{"inlE",	EINST,	EXPOPT-256,	8,	0xe5L},
{"inE",		EINST,	EXPOPT-256,	8,	0xe5L},

{"outbE",	EINST,	EXPOPT-256,	8,	0xe6L},
{"outwE",	EINST,	EXPOPT-256,	8,	0xe7L},
{"outlE",	EINST,	EXPOPT-256,	8,	0xe7L},
{"outE",	EINST,	EXPOPT-256,	8,	0xe7L},

{"pushw",	INSTRW,	WSPOP1-256,	16,	0xff30L},
{"pushl",	INSTRL,	LSPOP1-256,	16,	0xff30L},
{"push",	INSTRL,	LSPOP1-256,	16,	0xff30L},

{"popw",	INSTRW,	WSPOP1-256,	16,	0x8f00L},
{"popl",	INSTRL,	LSPOP1-256,	16,	0x8f00L},
{"pop",		INSTRL,	LSPOP1-256,	16,	0x8f00L},

{"pushwR",	RINST,	WSPOPT-256,	8,	0x50L},

{"pushlR",	RINST,	LSPOPT-256,	8,	0x50L},
{"pushR",	RINST,	LSPOPT-256,	8,	0x50L},

{"pushlS",	SINST,	LSPOPT-256,	8,	0x06L},
{"pushlS1",	SINST,	LSPOPT-256,	16,	0x0f80L},

{"pushS",	SINST,	LSPOPT-256,	8,	0x06L},
{"pushS1",	SINST,	LSPOPT-256,	16,	0x0f80L},

{"popwR",	RINST,	WSPOPT-256,	8,	0x58L},

{"poplS",	SINST,	LSPOPT-256,	8,	0x07L},
{"poplS1",	SINST,	LSPOPT-256,	16,	0x0f81L},

{"popS",	SINST,	LSPOPT-256,	8,	0x07L},
{"popS1",	SINST,	LSPOPT-256,	16,	0x0f81L},

{"poplR",	RINST,	LSPOPT-256,	8,	0x58L},
{"popR",	RINST,	LSPOPT-256,	8,	0x58L},


{"clrb",	INSTRB,	BCLR-256,	0,	0x0L},
{"clrw",	INSTRW,	WCLR-256,	0,	0x0L},
{"clrl",	INSTRL,	LCLR-256,	0,	0x0L},
{"clr",		INSTRL,	LCLR-256,	0,	0x0L},

{"incb",	INSTRB,	BINCDEC-256,	16,	0xfe00L},
{"incw",	INSTRW,	WINCDEC-256,	16,	0xff00L},
{"incl",	INSTRL,	LINCDEC-256,	16,	0xff00L},
{"inc",		INSTRL,	LINCDEC-256,	16,	0xff00L},
{"incwR",	RINST,	INCOPT-256,	8,	0x40L},
{"inclR",	RINST,	INCOPT-256,	8,	0x40L},
{"incR",	RINST,	INCOPT-256,	8,	0x40L},

{"decb",	INSTRB,	BINCDEC-256,	16,	0xfe08L},
{"decw",	INSTRW,	WINCDEC-256,	16,	0xff08L},
{"decl",	INSTRL,	LINCDEC-256,	16,	0xff08L},
{"dec",		INSTRL,	LINCDEC-256,	16,	0xff08L},
{"decwR",	RINST,	INCOPT-256,	8,	0x48L},
{"declR",	RINST,	INCOPT-256,	8,	0x48L},
{"decR",	RINST,	INCOPT-256,	8,	0x48L},

{"negb",	INSTRB,	BMONOP1-256,	16,	0xf618L},
{"negw",	INSTRW,	WMONOP1-256,	16,	0xf718L},
{"negl",	INSTRL,	LMONOP1-256,	16,	0xf718L},
{"neg",		INSTRL,	LMONOP1-256,	16,	0xf718L},

{"notb",	INSTRB,	BMONOP1-256,	16,	0xf610L},
{"notw",	INSTRW, WMONOP1-256,	16,	0xf710L},
{"notl",	INSTRL, LMONOP1-256,	16,	0xf710L},
{"not",		INSTRL, LMONOP1-256,	16,	0xf710L},

{"mulb",	INSTRB,	BMULDIV-256,	16,	0xf620L},
{"imulb",	INSTRB,	BMULDIV-256,	16,	0xf628L},

{"mulw",	INSTRW,	WMULDIV-256,	16,	0xf720L},
{"imulw",	INSTRW,	WMULDIV-256,	16,	0xf728L},
{"imulwI",	INSTRW,	WMULDIV-256,	16,	0x6900L},
{"imulwR",	INSTRW,	WMULDIV-256,	24,	0x0faf00L},

{"mull",	INSTRL,	LMULDIV-256,	16,	0xf720L},
{"mul",		INSTRL,	LMULDIV-256,	16,	0xf720L},
{"imull",	INSTRL,	LMULDIV-256,	16,	0xf728L},
{"imul",	INSTRL,	LMULDIV-256,	16,	0xf728L},
{"imullI",	INSTRL,	LMULDIV-256,	16,	0x6900L},
{"imulI",	INSTRL,	LMULDIV-256,	16,	0x6900L},
{"imullR",	INSTRL,	LMULDIV-256,	24,	0x0faf00L},
{"imulR",	INSTRL,	LMULDIV-256,	24,	0x0faf00L},

{"divb",	INSTRB,	BMULDIV-256,	16,	0xf630L},
{"idivb",	INSTRB,	BMULDIV-256,	16,	0xf638L},

{"divw",	INSTRW,	WMULDIV-256,	16,	0xf730L},
{"idivw",	INSTRW,	WMULDIV-256,	16,	0xf738L},

{"divl",	INSTRL,	LMULDIV-256,	16,	0xf730L},
{"div",		INSTRL,	LMULDIV-256,	16,	0xf730L},
{"idivl",	INSTRL,	LMULDIV-256,	16,	0xf738L},
{"idiv",	INSTRL,	LMULDIV-256,	16,	0xf738L},

{"shlb",	INSTRB,	BLOGIC1-256,	16,	0xd020L},
{"salb",	INSTRB,	BLOGIC1-256,	16,	0xd020L},
{"shrb",	INSTRB,	BLOGIC1-256,	16,	0xd028L},
{"sarb",	INSTRB,	BLOGIC1-256,	16,	0xd038L},
{"rolb",	INSTRB,	BLOGIC1-256,	16,	0xd000L},
{"rorb",	INSTRB,	BLOGIC1-256,	16,	0xd008L},
{"rclb",	INSTRB,	BLOGIC1-256,	16,	0xd010L},
{"rcrb",	INSTRB,	BLOGIC1-256,	16,	0xd018L},

{"shlw",	INSTRW,	WLOGIC1-256,	16,	0xd120L},
{"salw",	INSTRW,	WLOGIC1-256,	16,	0xd120L},
{"shrw",	INSTRW,	WLOGIC1-256,	16,	0xd128L},
{"sarw",	INSTRW,	WLOGIC1-256,	16,	0xd138L},
{"rolw",	INSTRW,	WLOGIC1-256,	16,	0xd100L},
{"rorw",	INSTRW,	WLOGIC1-256,	16,	0xd108L},
{"rclw",	INSTRW,	WLOGIC1-256,	16,	0xd110L},
{"rcrw",	INSTRW,	WLOGIC1-256,	16,	0xd118L},

{"shll",	INSTRL,	LLOGIC1-256,	16,	0xd120L},
{"sall",	INSTRL,	LLOGIC1-256,	16,	0xd120L},
{"shrl",	INSTRL,	LLOGIC1-256,	16,	0xd128L},
{"sarl",	INSTRL,	LLOGIC1-256,	16,	0xd138L},
{"roll",	INSTRL,	LLOGIC1-256,	16,	0xd100L},
{"rorl",	INSTRL,	LLOGIC1-256,	16,	0xd108L},
{"rcll",	INSTRL,	LLOGIC1-256,	16,	0xd110L},
{"rcrl",	INSTRL,	LLOGIC1-256,	16,	0xd118L},

{"shl",		INSTRL,	LLOGIC1-256,	16,	0xd120L},
{"sal",		INSTRL,	LLOGIC1-256,	16,	0xd120L},
{"shr",		INSTRL,	LLOGIC1-256,	16,	0xd128L},
{"sar",		INSTRL,	LLOGIC1-256,	16,	0xd138L},
{"rol",		INSTRL,	LLOGIC1-256,	16,	0xd100L},
{"ror",		INSTRL,	LLOGIC1-256,	16,	0xd108L},
{"rcl",		INSTRL,	LLOGIC1-256,	16,	0xd110L},
{"rcr",		INSTRL,	LLOGIC1-256,	16,	0xd118L},

{"call",	INSTRW,	CALLOP-256,	8,	0xe8L},
{"lcall",	INSTRL,	LCALLOP-256,	8,	0x9aL},
{"callIN",	ININST,	INDIRECT-256,	16,	0xff10L},
{"lcallIN",	ININST,	INDIRECT-256,	16,	0xff18L},
{"jmp",		INSTRW,	JMPOP2-256,	8,	0xe9L},
{"ljmp",	INSTRL,	LJMPOP-256,	8,	0xeaL},
{"jmpIN",	ININST,	INDIRECT-256,	16,	0xff20L},
{"ljmpIN",	ININST,	INDIRECT-256,	16,	0xff28L},
{"retE",	EINST,	EXPOPT-256,	8,	0xc2L},
{"je",		INSTRB,	JMPOP1-256,	8,	0x74L},
{"jz",		INSTRB,	JMPOP1-256,	8,	0x74L},
{"jl",		INSTRB,	JMPOP1-256,	8,	0x7cL},
{"jnge",	INSTRB,	JMPOP1-256,	8,	0x7cL},
{"jle",		INSTRB,	JMPOP1-256,	8,	0x7eL},
{"jng",		INSTRB,	JMPOP1-256,	8,	0x7eL},
{"jc",		INSTRB,	JMPOP1-256,	8,	0x72L},
{"jb",		INSTRB,	JMPOP1-256,	8,	0x72L},
{"jnae",	INSTRB,	JMPOP1-256,	8,	0x72L},
{"jbe",		INSTRB,	JMPOP1-256,	8,	0x76L},
{"jna",		INSTRB,	JMPOP1-256,	8,	0x76L},
{"jp",		INSTRB,	JMPOP1-256,	8,	0x7aL},
{"jpe",		INSTRB,	JMPOP1-256,	8,	0x7aL},
{"jo",		INSTRB,	JMPOP1-256,	8,	0x70L},
{"js",		INSTRB,	JMPOP1-256,	8,	0x78L},
{"jne",		INSTRB,	JMPOP1-256,	8,	0x75L},
{"jnz",		INSTRB,	JMPOP1-256,	8,	0x75L},
{"jnl",		INSTRB,	JMPOP1-256,	8,	0x7dL},
{"jge",		INSTRB,	JMPOP1-256,	8,	0x7dL},
{"jnle",	INSTRB,	JMPOP1-256,	8,	0x7fL},
{"jg",		INSTRB,	JMPOP1-256,	8,	0x7fL},
{"jnc",		INSTRB, JMPOP1-256,	8,	0x73L},
{"jnb",		INSTRB,	JMPOP1-256,	8,	0x73L},
{"jae",		INSTRB,	JMPOP1-256,	8,	0x73L},
{"jnbe",	INSTRB,	JMPOP1-256,	8,	0x77L},
{"ja",		INSTRB,	JMPOP1-256,	8,	0x77L},
{"jnp",		INSTRB,	JMPOP1-256,	8,	0x7bL},
{"jpo",		INSTRB,	JMPOP1-256,	8,	0x7bL},
{"jno",		INSTRB,	JMPOP1-256,	8,	0x71L},
{"jns",		INSTRB,	JMPOP1-256,	8,	0x79L},

{"loop",	INSTRB,	LOOP-256,	8,	0xe2L},
{"loopz",	INSTRB,	LOOP-256,	8,	0xe1L},
{"loope",	INSTRB,	LOOP-256,	8,	0xe1L},
{"loopnz",	INSTRB,	LOOP-256,	8,	0xe0L},
{"loopne",	INSTRB,	LOOP-256,	8,	0xe0L},
{"jcxz",	INSTRB,	LOOP-256,	8,	0xe3L},

{"intI",	EINST,	EXPOPT-256,	8,	0xccL},
{"esc",		INSTRW,	WMONOP1-256,	16,	0xd800L},

{"movb",	INSTRB,	BMOVOP-256,	16,	0x8800L},
{"movbIG",	INSTRB,	IMMED-256,	16,	0xc600L},
{"movbIR",	INSTRB,	IMMED-256,	8,	0xb0L},
{"movbA",	INSTRB,	WMOVOPT-256,	8,	0xa0L},

{"movw",	INSTRW,	WMOVOP-256,	16,	0x8900L},
{"movwIG",	INSTRW,	IMMED-256,	16,	0xc700L},
{"movwIR",	INSTRW,	IMMED-256,	8,	0xb8L},
{"movwA",	INSTRW,	WMOVOPT-256,	8,	0xa1L},
{"movwGS",	INSTRW,	SEGMEM-256,	16,	0x8e00L},
{"movwSG",	INSTRW,	SEGMEM-256,	16,	0x8c00L},

{"movl",	INSTRL,	LMOVOP-256,	16,	0x8900L},
{"movlA",	INSTRL,	LMOVOP-256,	8,	0xa1L},
{"movlIR",	INSTRL,	LMOVOP-256,	8,	0xb8L},
{"movlIG",	INSTRL,	LMOVOP-256,	16,	0xc700L},
{"movlC",	INSTRL, LMOVOP-256,	24,	0x0f2000L},
{"movlD",	INSTRL, LMOVOP-256,	24,	0x0f2100L},
{"movlT",	INSTRL, LMOVOP-256,	24,	0x0f2400L},

{"mov",		INSTRL,	LMOVOP-256,	16,	0x8900L},
{"movA",	INSTRL,	LMOVOP-256,	8,	0xa1L},
{"movIR",	INSTRL,	LMOVOP-256,	8,	0xb8L},
{"movIG",	INSTRL,	LMOVOP-256,	16,	0xc700L},
{"movC",	INSTRL, LMOVOP-256,	24,	0x0f2000L},
{"movD",	INSTRL, LMOVOP-256,	24,	0x0f2100L},
{"movT",	INSTRL, LMOVOP-256,	24,	0x0f2400L},

{"xchgb",	INSTRB,	BXCHG-256,	16,	0x8600L},

{"xchgw",	INSTRW,	WXCHG-256,	16,	0x8700L},
{"xchgwA",	AINST,	XCHGOPT-256,	8,	0x90L},

{"xchgl",	INSTRL,	LXCHG-256,	16,	0x8700L},
{"xchg",	INSTRL,	LXCHG-256,	16,	0x8700L},
{"xchglA",	AINST,	XCHGOPT-256,	8,	0x90L},
{"xchgA",	AINST,	XCHGOPT-256,	8,	0x90L},


{"leaw",	INSTRW,	WAOTOP-256,	16,	0x8d00L},
{"ldsw",	INSTRW,	WAOTOP-256,	16,	0xc500L},
{"lesw",	INSTRW,	WAOTOP-256,	16,	0xc400L},

{"lfsw",	INSTRW, WAOTOP1-256,	24,	0x0fb400L},
{"lgsw",	INSTRW, WAOTOP1-256,	24,	0x0fb500L},
{"lssw",	INSTRW, WAOTOP1-256,	24,	0x0fb200L},

{"leal",	INSTRL,	LAOTOP-256,	16,	0x8d00L},
{"lea",		INSTRL,	LAOTOP-256,	16,	0x8d00L},
{"ldsl",	INSTRL,	LAOTOP-256,	16,	0xc500L},
{"lds",		INSTRL,	LAOTOP-256,	16,	0xc500L},
{"lesl",	INSTRL,	LAOTOP-256,	16,	0xc400L},
{"les",		INSTRL,	LAOTOP-256,	16,	0xc400L},

{"lfsl",	INSTRL, LAOTOP1-256,	24,	0x0fb400L},
{"lfs",		INSTRL, LAOTOP1-256,	24,	0x0fb400L},
{"lgsl",	INSTRL, LAOTOP1-256,	24,	0x0fb500L},
{"lgs",		INSTRL, LAOTOP1-256,	24,	0x0fb500L},
{"lssl",	INSTRL, LAOTOP1-256,	24,	0x0fb200L},
{"lss",		INSTRL, LAOTOP1-256,	24,	0x0fb200L},


{"addb",	INSTRB,	BDYADIC-256,	16,	0x0000L},
{"addbIG",	INSTRB,	IMMED-256,	16,	0x8000L},
{"addbIA",	IAINST,	BDYADOPT-256,	8,	0x04L},

{"addw",	INSTRW,	WDYADIC-256,	16,	0x0100L},
{"addwIG",	INSTRW,	IMMED-256,	16,	0x8100L},
{"addwIA",	IAINST,	WDYADOPT-256,	8,	0x05L},

{"add",		INSTRL,	LDYADIC-256,	16,	0x0100L},
{"addIG",	INSTRL,	IMMED-256,	16,	0x8100L},
{"addIA",	IAINST,	LDYADOPT-256,	8,	0x05L},

{"addl",	INSTRL,	LDYADIC-256,	16,	0x0100L},
{"addlIG",	INSTRL,	IMMED-256,	16,	0x8100L},
{"addlIA",	IAINST,	LDYADOPT-256,	8,	0x05L},

{"adcb",	INSTRB,	BDYADIC-256,	16,	0x1000L},
{"adcbIG",	INSTRB,	IMMED-256,	16,	0x8010L},
{"adcbIA",	IAINST,	BDYADOPT-256,	8,	0x14L},

{"adcw",	INSTRW,	WDYADIC-256,	16,	0x1100L},
{"adcwIG",	INSTRW,	IMMED-256,	16,	0x8110L},
{"adcwIA",	IAINST,	WDYADOPT-256,	8,	0x15L},

{"adc",		INSTRL,	LDYADIC-256,	16,	0x1100L},
{"adcIG",	INSTRL,	IMMED-256,	16,	0x8110L},
{"adcIA",	IAINST,	LDYADOPT-256,	8,	0x15L},

{"adcl",	INSTRL,	LDYADIC-256,	16,	0x1100L},
{"adclIG",	INSTRL,	IMMED-256,	16,	0x8110L},
{"adclIA",	IAINST,	LDYADOPT-256,	8,	0x15L},


{"subb",	INSTRB,	BDYADIC-256,	16,	0x2800L},
{"subbIG",	INSTRB,	IMMED-256,	16,	0x8028L},
{"subbIA",	IAINST,	BDYADOPT-256,	8,	0x2cL},

{"subw",	INSTRW,	WDYADIC-256,	16,	0x2900L},
{"subwIG",	INSTRW,	IMMED-256,	16,	0x8128L},
{"subwIA",	IAINST,	WDYADOPT-256,	8,	0x2dL},

{"sub",		INSTRL,	LDYADIC-256,	16,	0x2900L},
{"subIG",	INSTRL,	IMMED-256,	16,	0x8128L},
{"subIA",	IAINST,	LDYADOPT-256,	8,	0x2dL},

{"subl",	INSTRL,	LDYADIC-256,	16,	0x2900L},
{"sublIG",	INSTRL,	IMMED-256,	16,	0x8128L},
{"sublIA",	IAINST,	LDYADOPT-256,	8,	0x2dL},

{"sbbb",	INSTRB,	BDYADIC-256,	16,	0x1800L},
{"sbbbIG",	INSTRB,	IMMED-256,	16,	0x8018L},
{"sbbbIA",	IAINST,	BDYADOPT-256,	8,	0x1cL},

{"sbbw",	INSTRW,	WDYADIC-256,	16,	0x1900L},
{"sbbwIG",	INSTRW,	IMMED-256,	16,	0x8118L},
{"sbbwIA",	IAINST,	WDYADOPT-256,	8,	0x1dL},

{"sbb",		INSTRL,	LDYADIC-256,	16,	0x1900L},
{"sbbIG",	INSTRL,	IMMED-256,	16,	0x8118L},
{"sbbIA",	IAINST,	LDYADOPT-256,	8,	0x1dL},

{"sbbl",	INSTRL,	LDYADIC-256,	16,	0x1900L},
{"sbblIG",	INSTRL,	IMMED-256,	16,	0x8118L},
{"sbblIA",	IAINST,	LDYADOPT-256,	8,	0x1dL},

{"cmpb",	INSTRB,	BDYADIC-256,	16,	0x3800L},
{"cmpbIG",	INSTRB,	IMMED-256,	16,	0x8038L},
{"cmpbIA",	IAINST,	BDYADOPT-256,	8,	0x3cL},

{"cmpw",	INSTRW,	WDYADIC-256,	16,	0x3900L},
{"cmpwIG",	INSTRW,	IMMED-256,	16,	0x8138L},
{"cmpwIA",	IAINST,	WDYADOPT-256,	8,	0x3dL},

{"cmp",		INSTRL,	LDYADIC-256,	16,	0x3900L},
{"cmpIG",	INSTRL,	IMMED-256,	16,	0x8138L},
{"cmpIA",	IAINST,	LDYADOPT-256,	8,	0x3dL},

{"cmpl",	INSTRL,	LDYADIC-256,	16,	0x3900L},
{"cmplIG",	INSTRL,	IMMED-256,	16,	0x8138L},
{"cmplIA",	IAINST,	LDYADOPT-256,	8,	0x3dL},

{"andb",	INSTRB,	BDYADIC-256,	16,	0x2000L},
{"andbIG",	INSTRB,	IMMED-256,	16,	0x8020L},
{"andbIA",	IAINST,	BDYADOPT-256,	8,	0x24L},

{"andw",	INSTRW,	WLOGIC2-256,	16,	0x2100L},
{"andwIG",	INSTRW,	IMMED-256,	16,	0x8120L},
{"andwIA",	IAINST,	WDYADOPT-256,	8,	0x25L},

{"and",		INSTRL,	LLOGIC2-256,	16,	0x2100L},
{"andIG",	INSTRL,	IMMED-256,	16,	0x8120L},
{"andIA",	IAINST,	LDYADOPT-256,	8,	0x25L},

{"andl",	INSTRL,	LLOGIC2-256,	16,	0x2100L},
{"andlIG",	INSTRL,	IMMED-256,	16,	0x8120L},
{"andlIA",	IAINST,	LDYADOPT-256,	8,	0x25L},

{"orb",		INSTRB,	BDYADIC-256,	16,	0x0800L},
{"orbIG",	INSTRB,	IMMED-256,	16,	0x8008L},
{"orbIA",	IAINST,	BDYADOPT-256,	8,	0x0cL},

{"orw",		INSTRW,	WLOGIC2-256,	16,	0x0900L},
{"orwIG",	INSTRW,	IMMED-256,	16,	0x8108L},
{"orwIA",	IAINST,	WDYADOPT-256,	8,	0x0dL},

{"or",		INSTRL,	LLOGIC2-256,	16,	0x0900L},
{"orIG",	INSTRL,	IMMED-256,	16,	0x8108L},
{"orIA",	IAINST,	LDYADOPT-256,	8,	0x0dL},

{"orl",		INSTRL,	LLOGIC2-256,	16,	0x0900L},
{"orlIG",	INSTRL,	IMMED-256,	16,	0x8108L},
{"orlIA",	IAINST,	LDYADOPT-256,	8,	0x0dL},


{"xorb",	INSTRB,	BDYADIC-256,	16,	0x3000L},
{"xorbIG",	INSTRB,	IMMED-256,	16,	0x8030L},
{"xorbIA",	IAINST,	BDYADOPT-256,	8,	0x34L},

{"xorw",	INSTRW,	WLOGIC2-256,	16,	0x3100L},
{"xorwIG",	INSTRW,	IMMED-256,	16,	0x8130L},
{"xorwIA",	IAINST,	WDYADOPT-256,	8,	0x35L},

{"xor",		INSTRL,	LLOGIC2-256,	16,	0x3100L},
{"xorIG",	INSTRL,	IMMED-256,	16,	0x8130L},
{"xorIA",	IAINST,	LDYADOPT-256,	8,	0x35L},

{"xorl",	INSTRL,	LLOGIC2-256,	16,	0x3100L},
{"xorlIG",	INSTRL,	IMMED-256,	16,	0x8130L},
{"xorlIA",	IAINST,	LDYADOPT-256,	8,	0x35L},

{"testb",	INSTRB,	BTEST-256,	16,	0x8400L},
{"testbS",	INSTRB,	BDYADOPT-256,	16,	0x8400L},
{"testbIA",	IAINST,	BDYADOPT-256,	8,	0xa8L},
{"testbIG",	INSTRB,	IMMED-256,	16,	0xf600L},

{"testw",	INSTRW,	WTEST-256,	16,	0x8500L},
{"testwS",	INSTRW,	WDYADOPT-256,	16,	0x8500L},
{"testwIA",	IAINST,	WDYADOPT-256,	8,	0xa9L},
{"testwIG",	INSTRW,	IMMED-256,	16,	0xf700L},

{"test",	INSTRL,	LTEST-256,	16,	0x8500L},
{"testS",	INSTRL,	LDYADOPT-256,	16,	0x8500L},
{"testIA",	IAINST,	LDYADOPT-256,	8,	0xa9L},
{"testIG",	INSTRL,	IMMED-256,	16,	0xf700L},

{"testl",	INSTRL,	LTEST-256,	16,	0x8500L},
{"testlS",	INSTRL,	LDYADOPT-256,	16,	0x8500L},
{"testlIA",	IAINST,	LDYADOPT-256,	8,	0xa9L},
{"testlIG",	INSTRL,	IMMED-256,	16,	0xf700L},

{"seta",	INSTRL,	SETOP-256,	24,	0x0f9700L},
{"setae",	INSTRL,	SETOP-256,	24,	0x0f9300L},
{"setb",	INSTRL,	SETOP-256,	24,	0x0f9200L},
{"setbe",	INSTRL,	SETOP-256,	24,	0x0f9600L},
{"setc",	INSTRL,	SETOP-256,	24,	0x0f9200L},
{"sete",	INSTRL,	SETOP-256,	24,	0x0f9400L},
{"setg",	INSTRL,	SETOP-256,	24,	0x0f9F00L},
{"setge",	INSTRL,	SETOP-256,	24,	0x0f9D00L},
{"setl",	INSTRL,	SETOP-256,	24,	0x0f9C00L},
{"setle",	INSTRL,	SETOP-256,	24,	0x0f9E00L},
{"setna",	INSTRL,	SETOP-256,	24,	0x0f9600L},
{"setnae",	INSTRL,	SETOP-256,	24,	0x0f9200L},
{"setnb",	INSTRL,	SETOP-256,	24,	0x0f9300L},
{"setnbe",	INSTRL,	SETOP-256,	24,	0x0f9700L},
{"setnc",	INSTRL,	SETOP-256,	24,	0x0f9300L},
{"setne",	INSTRL,	SETOP-256,	24,	0x0f9500L},
{"setng",	INSTRL,	SETOP-256,	24,	0x0f9E00L},
{"setnge",	INSTRL,	SETOP-256,	24,	0x0f9C00L},
{"setnl",	INSTRL,	SETOP-256,	24,	0x0f9D00L},
{"setnle",	INSTRL,	SETOP-256,	24,	0x0f9F00L},
{"setno",	INSTRL,	SETOP-256,	24,	0x0f9100L},
{"setnp",	INSTRL,	SETOP-256,	24,	0x0f9B00L},
{"setns",	INSTRL,	SETOP-256,	24,	0x0f9900L},
{"setnz",	INSTRL,	SETOP-256,	24,	0x0f9500L},
{"seto",	INSTRL,	SETOP-256,	24,	0x0f9000L},
{"setp",	INSTRL,	SETOP-256,	24,	0x0f9A00L},
{"setpe",	INSTRL,	SETOP-256,	24,	0x0f9A00L},
{"setpo",	INSTRL,	SETOP-256,	24,	0x0f9B00L},
{"sets",	INSTRL,	SETOP-256,	24,	0x0f9800L},
{"setz",	INSTRL,	SETOP-256,	24,	0x0f9400L},

{"cr0",		MREG,	CTLREG-256,	3,	0x0L},
{"cr2",		MREG,	CTLREG-256,	3,	0x2L},
{"cr3",		MREG,	CTLREG-256,	3,	0x3L},

{"db0",		MREG,	DBREG-256,	3,	0x0L},
{"db1",		MREG,	DBREG-256,	3,	0x1L},
{"db2",		MREG,	DBREG-256,	3,	0x2L},
{"db3",		MREG,	DBREG-256,	3,	0x3L},
{"db6",		MREG,	DBREG-256,	3,	0x6L},
{"db7",		MREG,	DBREG-256,	3,	0x7L},

{"dr0",		MREG,	DBREG-256,	3,	0x0L},
{"dr1",		MREG,	DBREG-256,	3,	0x1L},
{"dr2",		MREG,	DBREG-256,	3,	0x2L},
{"dr3",		MREG,	DBREG-256,	3,	0x3L},
{"dr6",		MREG,	DBREG-256,	3,	0x6L},
{"dr7",		MREG,	DBREG-256,	3,	0x7L},

/* new 486 testability registers */
{"tr3",		MREG,	TRREG-256,	3,	0x3L},
{"tr4",		MREG,	TRREG-256,	3,	0x4L},
{"tr5",		MREG,	TRREG-256,	3,	0x5L},

{"tr6",		MREG,	TRREG-256,	3,	0x6L},
{"tr7",		MREG,	TRREG-256,	3,	0x7L},

{"eax",		GREG32,	AREG32-256,	3,	0x0L},
{"ecx",		GREG32,	REG32-256,	3,	0x1L},
{"edx",		GREG32,	DREG32-256,	3,	0x2L},
{"ebx",		EBX,	BREG32-256,	3,	0x3L},
{"esp",		GREG32,	REG32-256,	3,	0x4L},
{"ebp",		EBP,	BREG32-256,	3,	0x5L},
{"esi",		ESI,	IREG32-256,	3,	0x6L},
{"edi",		EDI,	IREG32-256,	3,	0x7L},

{"ax",		GREG16,	AREG16-256,	3,	0x0L},
{"cx",		GREG16,	REG16-256,	3,	0x1L},
{"dx",		GREG16,	DREG16-256,	3,	0x2L},
{"bx",		BX,	BREG16-256,	3,	0x3L},
{"sp",		GREG16,	REG16-256,	3,	0x4L},
{"bp",		BP,	BREG16-256,	3,	0x5L},
{"si",		SI,	IREG16-256,	3,	0x6L},
{"di",		DI,	IREG16-256,	3,	0x7L},
{"al",		GREG8,	AREG8-256,	3,	0x0L},
{"cl",		GREG8,	CLREG8-256,	3,	0x1L},
{"dl",		GREG8,	REG8-256,	3,	0x2L},
{"bl",		GREG8,	REG8-256,	3,	0x3L},
{"ah",		GREG8,	REG8-256,	3,	0x4L},
{"ch",		GREG8,	REG8-256,	3,	0x5L},
{"dh",		GREG8,	REG8-256,	3,	0x6L},
{"bh",		GREG8,	REG8-256,	3,	0x7L},

{"es",		SEGREG,	SREG-256,	2,	0x0L},
{"cs",		SEGREG,	SREG-256,	2,	0x1L},
{"ss",		SEGREG,	SREG-256,	2,	0x2L},
{"ds",		SEGREG,	SREG-256,	2,	0x3L},
{"fs",		SEGREG,	SREG-256,	2,	0x4L},
{"gs",		SEGREG,	SREG-256,	2,	0x5L},


{".section",	PSEUDO,	PSSECTION-256,	0,	0x0L},
{".previous",	PSEUDO,	PSPREV-256,	0,	0x0L},
{".data",	PSEUDO,	PSDATA-256,	0,	0x0L},
{".text",	PSEUDO,	PSTEXT-256,	0,	0x0L},
{".bss",	PSEUDO,	PSBSS-256,	0,	0x0L},
{".comm",	PSEUDO, PSCOMM-256,	0,	0x0L},
{".globl",	PSEUDO,	PSGLOBAL-256,	0,	0x0L},
{".local",	PSEUDO,	PSLOCAL-256,	0,	0x0L},
{".weak",	PSEUDO,	PSWEAK-256,	0,	0x0L},
{".size",	PSEUDO,	PSSIZE-256,	0,	0x0L},
{".type",	PSEUDO,	PSTYPE-256,	0,	0x0L},
{".lcomm",	PSEUDO, PSLCOMM-256,	0,	0x0L},
{".set",	PSEUDO,	PSSET-256,	0,	0x0L},
{".byte",	PSEUDO,	PSBYTE-256,	0,	0x0L},
{".value",	PSEUDO,	PSVALUE-256,	0,	0x0L},
{".2byte",	PSEUDO,	PS2BYTE-256,	0,	0x0L},
{".long",	PSEUDO,	PSLONG-256,	0,	0x0L},
{".4byte",	PSEUDO,	PS4BYTE-256,	0,	0x0L},
{".float",	PSEUDO,	PSFLOAT-256,	0,	0x0L},
{".double",	PSEUDO,	PSDOUBLE-256,	0,	0x0L},
{".ext",	PSEUDO,	PSEXT-256,	0,	0x0L},
{".bcd",	PSEUDO,	PSBCD-256,	0,	0x0L},
{".string",	PSEUDO,	PSSTRING-256,	0,	0x0L},
{".align",	PSEUDO,	PSALIGN-256,	0,	0x0L},
{".even",	PSEUDO,	PSEVEN-256,	0,	0x0L},
{".ident",	PSEUDO, PSIDENT-256,	0,	0x0L},
{".zero",	PSEUDO, PSZERO-256,	0,	0x0L},
{".file",	PSEUDO,	PSFILE-256,	0,	0x0L},
{".version",	PSEUDO, PSVERS-256,	0,	0x0L},
{".ln",		PSEUDO,	PSLN-256,	0,	0x0L},
{".def",	PSEUDO,	PSDEF-256,	0,	0x0L},
{".dim",	PSEUDO,	PSDIM-256,	0,	0x0L},
{".line",	PSEUDO,	PSLINE-256,	0,	0x0L},
{".scl",	PSEUDO,	PSSCL-256,	0,	0x0L},
{".tag",	PSEUDO,	PSTAG-256,	0,	0x0L},
{".val",	PSEUDO,	PSVAL-256,	0,	0x0L},
{".endef",	PSEUDO,	PSENDEF-256,	0,	0x0L},
{".pushsection",PSEUDO,	PSPUSHSECT-256,	0,	0x0L},
{".popsection", PSEUDO, PSPOPSECT-256,  0,	0x0L},
{".jmpbeg",	PSEUDO, PSJMPTAB-256,	8,	0xf1L},
{".jmpend",	PSEUDO, PSJMPTAB-256,	16,	0xffffL},
/*
	special 186 op codes

	pusha, popa:	push/pop "all" registers
	pushI:		push a 16 bit quantity (push Immediate)
	enter/leave:	enter/leave a procedure
	sin/sout:	get/put a byte from/to a DX port
	bound:		check array bounds
	iimul:		multiply by a constant (integer immediate mult)

	Note:	all the logical instructions now have an optional
		shift/rotate by a count. No new op codes were reqd
*/
{"pusha",	INSTRL, NO_OP-256,	8,	0x60L},
{"popa",	INSTRL, NO_OP-256,	8,	0x61L},

{"pushal",	INSTRL, NO_OP-256,	8,	0x60L},
{"popal",	INSTRL, NO_OP-256,	8,	0x61L},

{"pushaw",	INSTRW, NO_OP-256,	16,	0x6660L},
{"popaw",	INSTRW, NO_OP-256,	16,	0x6661L},


{"pushwI",	INSTRW, WSPOPT-256,	8,	0x68L},
{"pushwIB",	INSTRW, WSPOPT-256,	8,	0x6aL},

{"pushlI",	INSTRL, LSPOPT-256,	8,	0x68L},
{"pushlIB",	INSTRL, LSPOPT-256,	8,	0x6aL},

{"pushI",	INSTRL, LSPOPT-256,	8,	0x68L},
{"pushIB",	INSTRW, WSPOPT-256,	8,	0x6aL},

{"enter",	INSTRW, ENTER-256,	8,	0xc8L},
{"leave",	INSTRW, NO_OP-256,	8,	0xc9L},

{"insb",	INSTRB,	BSTROP-256,	8,	0x6cL},
{"insw",	INSTRW,	WSTROP-256,	8,	0x6dL},
{"insl",	INSTRL,	LSTROP-256,	8,	0x6dL},
{"ins",		INSTRL,	LSTROP-256,	8,	0x6dL},

{"outsb",	INSTRB,	BSTROP-256,	8,	0x6eL},
{"outsw",	INSTRW,	WSTROP-256,	8,	0x6fL},
{"outsl",	INSTRW,	LSTROP-256,	8,	0x6fL},
{"outs",	INSTRW,	LSTROP-256,	8,	0x6fL},

{"boundw",	INSTRW,	WBOUND-256,	16,	0x6200L},
{"boundl",	INSTRL,	LBOUND-256,	16,	0x6200L},
{"bound",	INSTRL,	LBOUND-256,	16,	0x6200L},
/*

	286 instructions added........jws

*/
{"clts",	INSTRW, NO_OP-256,	16,	0x0f06},
{"lgdt",	INSTRW, LSDT-256,	24,	0x0f0110L},
{"sgdt",	INSTRW, LSDT-256,	24,	0x0f0100L},
{"lidt",	INSTRW, LSDT-256,	24,	0x0f0118L},
{"sidt",	INSTRW, LSDT-256,	24,	0x0f0108L},
{"lldt",	INSTRW, PROT1-256,	24,	0x0f0010L},
{"sldt",	INSTRW, PROT1-256,	24,	0x0f0000L},
{"ltr",		INSTRW, PROT1-256,	24,	0x0f0018L},
{"str",		INSTRW, PROT1-256,	24,	0x0f0008L},
{"lmsw",	INSTRW, PROT3-256,	24,	0x0f0130L},
{"smsw",	INSTRW, PROT3-256,	24,	0x0f0120L},
{"lar",		INSTRW, PROT2-256,	24,	0x0f0200L},
{"lsl",		INSTRW, PROT2-256,	24,	0x0f0300L},
{"arpl",	INSTRW, ARPL-256,	16,	0x6300L},
{"verr",	INSTRW, PROT1-256,	24,	0x0f0020L},
{"verw",	INSTRW, PROT1-256,	24,	0x0f0028L},
/* floating point instructions, register, and pseudo-ops  */
{"f2xm1",	INSTRW,	FLOAT1-256,	16,	0xd9f0L},
{"fabs",	INSTRW,	FLOAT1-256,	16,	0xd9e1L},
{"fchs",	INSTRW,	FLOAT1-256,	16,	0xd9e0L},
{"fclex",	INSTRW,	FLOAT1-256,	24,	0x9bdbe2L},
{"fcompp",	INSTRW,	FLOAT1-256,	16,	0xded9L},
{"fucompp",	INSTRW,	FLOAT1-256,	16,	0xdae9L},
{"fdecstp",	INSTRW,	FLOAT1-256,	16,	0xd9f6L},
{"fincstp",	INSTRW,	FLOAT1-256,	16,	0xd9f7L},
{"finit",	INSTRW,	FLOAT1-256,	24,	0x9bdbe3L},
{"fld1",	INSTRW,	FLOAT1-256,	16,	0xd9e8L},
{"fldl2e",	INSTRW,	FLOAT1-256,	16,	0xd9eaL},
{"fldl2t",	INSTRW,	FLOAT1-256,	16,	0xd9e9L},
{"fldlg2",	INSTRW,	FLOAT1-256,	16,	0xd9ecL},
{"fldln2",	INSTRW,	FLOAT1-256,	16,	0xd9edL},
{"fldpi",	INSTRW,	FLOAT1-256,	16,	0xd9ebL},
{"fldz",	INSTRW,	FLOAT1-256,	16,	0xd9eeL},
{"fnclex",	INSTRW,	FLOAT1-256,	16,	0xdbe2L},
{"fninit",	INSTRW,	FLOAT1-256,	16,	0xdbe3L},
{"fnop",	INSTRW,	FLOAT1-256,	16,	0xd9d0L},
{"fpatan",	INSTRW,	FLOAT1-256,	16,	0xd9f3L},
{"fprem",	INSTRW,	FLOAT1-256,	16,	0xd9f8L},
{"fprem1",	INSTRW,	FLOAT1-256,	16,	0xd9f5L},
{"fptan",	INSTRW,	FLOAT1-256,	16,	0xd9f2L},
{"fcos",	INSTRW,	FLOAT1-256,	16,	0xd9ffL},
{"fsin",	INSTRW,	FLOAT1-256,	16,	0xd9feL},
{"fsincos",	INSTRW,	FLOAT1-256,	16,	0xd9fbL},
{"frndint",	INSTRW,	FLOAT1-256,	16,	0xd9fcL},
{"fscale",	INSTRW,	FLOAT1-256,	16,	0xd9fdL},
{"fsetpm",	INSTRW,	FLOAT1-256,	24,	0x9bdbe4L},
{"fsqrt",	INSTRW,	FLOAT1-256,	16,	0xd9faL},
{"ftst",	INSTRW,	FLOAT1-256,	16,	0xd9e4L},
{"fwait",	INSTRW,	FLOAT1-256,	8,	0x9bL},
{"fxam",	INSTRW,	FLOAT1-256,	16,	0xd9e5L},
{"fxtract",	INSTRW,	FLOAT1-256,	16,	0xd9f4L},
{"fyl2x",	INSTRW,	FLOAT1-256,	16,	0xd9f1L},
{"fyl2xp1",	INSTRW,	FLOAT1-256,	16,	0xd9f9L},
{"fldcw",	INSTRW,	FLOAT2-256,	16,	0xd928L},
{"fstcw",	INSTRW,	FLOAT2-256,	24,	0x9bd938L},
{"fnstcw",	INSTRW,	FLOAT2-256,	16,	0xd938L},
{"fstsw",	INSTRW,	FLOAT6-256,	24,	0x9bdd38L},
{"fnstsw",	INSTRW,	FLOAT6-256,	16,	0xdd38L},
{"fstenv",	INSTRW,	FLOAT2-256,	24,	0x9bd930L},
{"fnstenv",	INSTRW,	FLOAT2-256,	16,	0xd930L},
{"fldenv",	INSTRW,	FLOAT2-256,	16,	0xd920L},
{"fsave",	INSTRW,	FLOAT2-256,	24,	0x9bdd30L},
{"fnsave",	INSTRW,	FLOAT2-256,	16,	0xdd30L},
{"frstor",	INSTRW,	FLOAT2-256,	16,	0xdd20L},
{"fbld",	INSTRW,	FLOAT2-256,	16,	0xdf20L},
{"fbstp",	INSTRW,	FLOAT2-256,	16,	0xdf30L},
{"fiadd",	INSTRW, FLOAT2-256,	16,	0xde00L},
{"fiaddl",	INSTRW, FLOAT2-256,	16,	0xda00L},
{"ficom",	INSTRW, FLOAT2-256,	16,	0xde10L},
{"ficoml",	INSTRW, FLOAT2-256,	16,	0xda10L},
{"ficomp",	INSTRW, FLOAT2-256,	16,	0xde18L},
{"ficompl",	INSTRW, FLOAT2-256,	16,	0xda18L},
{"fidiv",	INSTRW, FLOAT2-256,	16,	0xde30L},
{"fidivl",	INSTRW, FLOAT2-256,	16,	0xda30L},
{"fidivr",	INSTRW, FLOAT2-256,	16,	0xde38L},
{"fidivrl",	INSTRW, FLOAT2-256,	16,	0xda38L},
{"fild",	INSTRW, FLOAT2-256,	16,	0xdf00L},
{"fildl",	INSTRW, FLOAT2-256,	16,	0xdb00L},
{"fildll",	INSTRW, FLOAT2-256,	16,	0xdf28L},
{"fimul",	INSTRW, FLOAT2-256,	16,	0xde08L},
{"fimull",	INSTRW, FLOAT2-256,	16,	0xda08L},
{"fist",	INSTRW, FLOAT2-256,	16,	0xdf10L},
{"fistl",	INSTRW, FLOAT2-256,	16,	0xdb10L},
{"fistp",	INSTRW, FLOAT2-256,	16,	0xdf18L},
{"fistpl",	INSTRW, FLOAT2-256,	16,	0xdb18L},
{"fistpll",	INSTRW, FLOAT2-256,	16,	0xdf38L},
{"fisub",	INSTRW, FLOAT2-256,	16,	0xde20L},
{"fisubl",	INSTRW, FLOAT2-256,	16,	0xda20L},
{"fisubr",	INSTRW, FLOAT2-256,	16,	0xde28L},
{"fisubrl",	INSTRW, FLOAT2-256,	16,	0xda28L},
{"fadd",	INSTRW,	FLOAT3-256,	16,	0xd8c0L},
{"fadds",	INSTRW,	FLOAT2-256,	16,	0xd800L},
{"faddl",	INSTRW,	FLOAT2-256,	16,	0xdc00L},
{"faddp",	INSTRW,	FLOAT5-256,	16,	0xdec0L},
{"fcom",	INSTRW,	FLOAT7-256,	16,	0xd8d0L},
{"fcoms",	INSTRW,	FLOAT2-256,	16,	0xd810L},
{"fcoml",	INSTRW,	FLOAT2-256,	16,	0xdc10L},
{"fcomp",	INSTRW,	FLOAT7-256,	16,	0xd8d8L},
{"fcomps",	INSTRW,	FLOAT2-256,	16,	0xd818L},
{"fcompl",	INSTRW,	FLOAT2-256,	16,	0xdc18L},
{"fucom",	INSTRW,	FLOAT7-256,	16,	0xdde0L},
{"fucomp",	INSTRW,	FLOAT7-256,	16,	0xdde8L},
{"fdiv",	INSTRW,	FLOAT3-256,	16,	0xd8f0L},
{"fdivs",	INSTRW,	FLOAT2-256,	16,	0xd830L},
{"fdivl",	INSTRW,	FLOAT2-256,	16,	0xdc30L},
{"fdivp",	INSTRW,	FLOAT5-256,	16,	0xdef0L},
{"fdivr",	INSTRW,	FLOAT3-256,	16,	0xd8f8L},
{"fdivrs",	INSTRW,	FLOAT2-256,	16,	0xd838L},
{"fdivrl",	INSTRW,	FLOAT2-256,	16,	0xdc38L},
{"fdivrp",	INSTRW,	FLOAT5-256,	16,	0xdef8L},
{"ffree",	INSTRW,	FLOAT4-256,	16,	0xddc0L},
{"fld",		INSTRW,	FLOAT4-256,	16,	0xd9c0L},
{"flds",	INSTRW,	FLOAT2-256,	16,	0xd900L},
{"fldl",	INSTRW,	FLOAT2-256,	16,	0xdd00L},
{"fldt",	INSTRW,	FLOAT2-256,	16,	0xdb28L},
{"fmul",	INSTRW,	FLOAT3-256,	16,	0xd8c8L},
{"fmuls",	INSTRW,	FLOAT2-256,	16,	0xd808L},
{"fmull",	INSTRW,	FLOAT2-256,	16,	0xdc08L},
{"fmulp",	INSTRW,	FLOAT5-256,	16,	0xdec8L},
{"fst",		INSTRW,	FLOAT4-256,	16,	0xddd0L},
{"fsts",	INSTRW,	FLOAT2-256,	16,	0xd910L},
{"fstl",	INSTRW,	FLOAT2-256,	16,	0xdd10L},
{"fstp",	INSTRW,	FLOAT4-256,	16,	0xddd8L},
{"fstps",	INSTRW,	FLOAT2-256,	16,	0xd918L},
{"fstpl",	INSTRW,	FLOAT2-256,	16,	0xdd18L},
{"fstpt",	INSTRW,	FLOAT2-256,	16,	0xdb38L},
{"fsub",	INSTRW,	FLOAT3-256,	16,	0xd8e0L},
{"fsubs",	INSTRW,	FLOAT2-256,	16,	0xd820L},
{"fsubl",	INSTRW,	FLOAT2-256,	16,	0xdc20L},
{"fsubp",	INSTRW,	FLOAT5-256,	16,	0xdee0L},
{"fsubr",	INSTRW,	FLOAT3-256,	16,	0xd8e8L},
{"fsubrs",	INSTRW,	FLOAT2-256,	16,	0xd828L},
{"fsubrl",	INSTRW,	FLOAT2-256,	16,	0xdc28L},
{"fsubrp",	INSTRW,	FLOAT5-256,	16,	0xdee8L},
{"fxch",	INSTRW,	FLOAT7-256,	16,	0xd9c8L},
{"st",		FSTACK, FREG-256,	3,	0x0L},

/* 486 instructions */
{"invd",	INSTRW, NO_OP-256,	16,	0x0f08L},
{"wbinvd",	INSTRW, NO_OP-256,	16,	0x0f09L},
{"invlpg",	INSTRW, INVLD-256,	24,	0x0f0138L},

{"cmpxchgb",	INSTRB, BCMPXCHG-256,	24,	0x0fa600L},
{"cmpxchgw",	INSTRW, WCMPXCHG-256,	24,	0x0fa700L},
{"cmpxchgl",	INSTRL, LCMPXCHG-256,	24,	0x0fa700L},
{"cmpxchg",	INSTRL, LCMPXCHG-256,	24,	0x0fa700L},

{"bswap",	INSTRL, BSWAP-256,	16,	0x0fc8L},

{"xaddb",	INSTRB, BXADD-256,	24,	0x0fc000L},
{"xaddw",	INSTRW, WXADD-256,	24,	0x0fc100L},
{"xaddl",	INSTRL, LXADD-256,	24,	0x0fc100L},
{"xadd",	INSTRL, LXADD-256,	24,	0x0fc100L},
